#!/bin/bash

# Nome do container Docker
ContainerName="laravel-app"

# Junta todos os argumentos em uma string
Arguments="$@"

# Fun√ß√£o para mostrar o progresso no estilo Docker
function Show-DockerStyleProgress {
    local TaskName=$1
    local Step=$2
    local TotalSteps=$3
    local progressBarLength=40
    local currentIndex=$((Step * progressBarLength / TotalSteps))
    local bar=""

    for ((i=0; i<progressBarLength; i++)); do
        if ((i < currentIndex)); then
            bar+="‚£ø"
        elif ((i == currentIndex)); then
            bar+="‚£∑"
        else
            bar+=" "
        fi
    done

    local percentage=$((Step * 100 / TotalSteps))
    printf "%s [%s] %d MB / %d MB (%d%%)\r" "$TaskName" "$bar" "$Step" "$TotalSteps" "$percentage"
}

# Fun√ß√£o para mostrar a barra de progresso
function Show-ProgressBar {
    local TaskName=$1
    local CurrentSize=$2
    local TotalSize=$3
    local progress=$((CurrentSize * 100 / TotalSize))
    local progressBarLength=20
    local progressBar
    local filled=$((progress * progressBarLength / 100))
    local empty=$((progressBarLength - filled))

    progressBar=$(printf "‚£∑%.0s" $(seq 1 $filled))
    progressBar+=$(printf " %.0s" $(seq 1 $empty))

    printf "%s [%s] %.2fMB / %.2fMB %d%%\r" "$TaskName" "$progressBar" "$CurrentSize" "$TotalSize" "$progress"
}

# Fun√ß√£o para mostrar o menu interativo
function Show-InteractiveMenu {
    local options=("$@")
    local selected=0
    local key
    local prompt="Selecione uma op√ß√£o:"

    while true; do
        clear
        echo "$prompt"
        echo "Use ‚Üë ‚Üì e Enter para selecionar:"

        for i in "${!options[@]}"; do
            if ((i == selected)); then
                echo -e "üü¢ ${options[$i]}"
            else
                echo -e "üîò ${options[$i]}"
            fi
        done

        read -rsn1 key
        case $key in
            $'\x1b[A') ((selected > 0)) && ((selected--)) ;; # UP
            $'\x1b[B') ((selected < ${#options[@]} - 1)) && ((selected++)) ;; # DOWN
            $'\x0a') echo "${options[$selected]}" && break ;; # ENTER
        esac
    done
}

if [[ -z "$Arguments" ]]; then
    options=(
        "php -v"
        "php artisan migrate"
        "php artisan config:clear"
        "php artisan db:seed"
        "composer install"
        "composer dump-autoload"
        "composer create-project laravel/laravel"
        "chmod -R 777 app"
        "laravel -v"
        "laravel new "
        "Sair"
    )

    selection=$(Show-InteractiveMenu "${options[@]}")

    if [[ "$selection" == "Sair" ]]; then
        echo "Saindo..."
        exit 0
    fi

    Arguments=($selection)
fi

echo ""
echo "[ $Arguments ] Executando..."
# Simulando o progresso de download ou execu√ß√£o do comando
TotalSize=100
Increment=10

for ((i=0; i<=TotalSize; i+=Increment)); do
    Show-DockerStyleProgress "$(date '+%Y-%m-%d %H:%M:%S')" "$i" "$TotalSize"
    sleep 0.5
done

echo ""
echo ""

# Fun√ß√£o para verificar se o container est√° em execu√ß√£o
function Test-ContainerRunning {
    containerStatus=$(docker inspect -f '{{.State.Running}}' "$ContainerName" 2>/dev/null)
    [[ "$containerStatus" == "true" ]]
}

# Se o container n√£o estiver rodando, inicie-o
if ! Test-ContainerRunning; then
    echo "Container '$ContainerName' n√£o est√° em execu√ß√£o. Iniciando..."
    docker-compose up -d
    sleep 5 # Espera 5 segundos para garantir que o container tenha tempo para iniciar
fi

# For√ßa sempre a cria√ß√£o na pasta 'app'
if [[ "${Arguments[0]}" == "composer" && "${Arguments[1]}" == "create-project" ]]; then
    ComposerCommand="composer create-project laravel/laravel app"
    TotalSize=257.8  # Total em MB (exemplo)
    CurrentSize=0

    while (( $(echo "$CurrentSize < $TotalSize" | bc -l) )); do
        Show-ProgressBar "Pulling" "$CurrentSize" "$TotalSize"
        CurrentSize=$(echo "$CurrentSize + 5" | bc)  # Incrementa 5MB a cada itera√ß√£o
        sleep 1
    done
    docker exec -it "$ContainerName" bash -c "$ComposerCommand"

    # Adiciona permiss√£o 777 para a pasta 'app'
    docker exec -it "$ContainerName" bash -c "chmod -R 777 /var/www/html/app"
fi

elif [[ "${Arguments[0]}" == "laravel" && "${Arguments[1]}" == "new" ]]; then
    LaravelCommand="laravel new app"
    docker exec -it "$ContainerName" bash -c "$LaravelCommand"

    # Adiciona permiss√£o 777 para a pasta 'app'
    docker exec -it "$ContainerName" bash -c "chmod -R 777 /var/www/html/app"
elif [[ "${Arguments[0]}" == "app-permission" ]]; then
    docker exec -it "$ContainerName" bash -c "chmod -R 777 /var/www/html/app"
    echo "Permiss√µes 777 atribu√≠das √† pasta 'app'."
elif [[ "${Arguments[0]}" == "pa" ]]; then
    ArtisanCommand="${Arguments[@]:1}"
    docker exec -it "$ContainerName" bash -c "cd /var/www/html/app && php artisan $ArtisanCommand"
elif [[ "${Arguments[0]}" == "artisan" ]]; then
    ArtisanCommand="${Arguments[@]:1}"
    docker exec -it "$ContainerName" bash -c "php artisan $ArtisanCommand"
else
    docker exec -it "$ContainerName" bash -c "$Arguments"
fi

echo ""
echo ""
echo "[ $Arguments ] conclu√≠do..."
echo "$(date '+%Y-%m-%d %H:%M:%S') [‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø]" 
